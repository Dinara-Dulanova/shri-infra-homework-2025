name: start release flow

on:
  workflow_dispatch:

jobs:
  release:
    name: Release build and publish
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [20.x]
        os: [ubuntu-latest]
    env:
      REGISTRY: cr.yandex/crpfnnn98v057d07iqev
      IMAGE_NAME: app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Get release version
        id: version
        run: echo "RELEASE_VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Login to Yandex Cloud Container Registry
        run: echo ${{ secrets.Y_CR_TOKEN }} | docker login --username oauth --password-stdin cr.yandex

      - name: Build Docker image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:${{ env.RELEASE_VERSION }} .
          docker tag $REGISTRY/$IMAGE_NAME:${{ env.RELEASE_VERSION }} $REGISTRY/$IMAGE_NAME:${{ env.RELEASE_VERSION }}_latest

      - name: Push Docker images
        run: |
          docker push $REGISTRY/$IMAGE_NAME:${{ env.RELEASE_VERSION }}
          docker push $REGISTRY/$IMAGE_NAME:${{ env.RELEASE_VERSION }}_latest

      - name: Create release branch
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b releases/${{ env.RELEASE_VERSION }}
          git push origin releases/${{ env.RELEASE_VERSION }}

      - name: Create Git tag
        run: |
          git tag v${{ env.RELEASE_VERSION }}
          git push origin v${{ env.RELEASE_VERSION }}

      - name: Update CHANGELOG.md
        run: |
          echo "## v${{ env.RELEASE_VERSION }} - $(date +'%Y-%m-%d')" > changelog_entry.txt
          echo "" >> changelog_entry.txt
          echo "**Список изменений (коммиты с предыдущего релиза):**" >> changelog_entry.txt
          git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> changelog_entry.txt
          echo "" >> changelog_entry.txt
          cat CHANGELOG.md >> changelog_entry.txt
          mv changelog_entry.txt CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v${{ env.RELEASE_VERSION }}"
          git push origin HEAD:releases/${{ env.RELEASE_VERSION }}

      - name: Получить предыдущий тег и коммиты
        id: changelog
        run: |
          git fetch --tags
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^[0-9]+$' | sed -n 2p)
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" main)
          else
            COMMITS=$(git log $PREV_TAG..main --pretty=format:"- %s (%h)")
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Сформировать тело Issue релиза
        run: |
          echo "# Релиз ${{ env.RELEASE_VERSION }}" > issue_body.txt
          echo "" >> issue_body.txt
          echo "**Дата:** $(date '+%Y-%m-%d %H:%M:%S')" >> issue_body.txt
          echo "**Автор релиза:** ${{ github.actor }}" >> issue_body.txt
          echo "**Номер версии:** ${{ env.RELEASE_VERSION }}" >> issue_body.txt
          echo "" >> issue_body.txt
          echo "**Список коммитов с предыдущего релиза:**" >> issue_body.txt
          echo "${{ env.COMMITS }}" >> issue_body.txt
          echo "" >> issue_body.txt
          echo "**Docker-образ:** cr.yandex/crpfnnn98v057d07iqev/app:${{ env.RELEASE_VERSION }}" >> issue_body.txt

      - name: Создать Issue в GitHub
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "Release ${{ env.RELEASE_VERSION }}"
          content-filepath: ./issue_body.txt
